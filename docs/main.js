// Generated by Haxe 4.3.2
(function ($global) { "use strict";
class MainJS {
	constructor() {
		this.today = new Date().getTime();
		this.initialized = false;
		this.sceneOffset = { x : 0.0, y : 0.0};
		this.sceneOffsetTarget = { x : 0.0, y : 0.0};
		let _gthis = this;
		window.document.addEventListener("DOMContentLoaded",function(event) {
			if(new URLSearchParams(window.location.search).get("clear") != null) {
				window.localStorage.clear();
			} else {
				window.document.onvisibilitychange = function() {
					if(window.document.visibilityState != "hidden" && !_gthis.initialized) {
						_gthis.init();
					}
				};
				window.onload = function() {
					if(window.document.visibilityState != "hidden") {
						_gthis.init();
					}
				};
			}
		});
	}
	init() {
		let now = new Date();
		this.today = new Date(now.getFullYear(),now.getMonth(),now.getDay(),0,0,0).getTime();
		this.internalTime = this.getTime();
		this.initialized = true;
		let _gthis = this;
		window.setTimeout(function() {
			_gthis.setupScene();
			_gthis.setupWindowManager();
			_gthis.resize();
			_gthis.updateWindowShape(false);
			_gthis.render(null);
			return window.onresize = $bind(_gthis,_gthis.resize);
		},500);
	}
	setupScene() {
		$global.console.log("setupScene");
		let div = window.document.createElement("dir");
		div.classList.add("container");
		div.id = "wrapper";
		let img = window.document.createElement("img");
		img.src = "img/logo_rawworks_text.webp";
		let w = window.outerWidth;
		let h = window.outerHeight;
		$global.console.log("Screen outerWidth: " + w + "px");
		$global.console.log("Screen outerHeight: " + h + "px");
		let screenWidth = window.screen.width;
		let screenHeight = window.screen.height;
		$global.console.log("Screen width: " + screenWidth + "px");
		$global.console.log("Screen height: " + screenHeight + "px");
		let availableScreenWidth = window.screen.availWidth;
		let availableScreenHeight = window.screen.availHeight;
		$global.console.log("Available Screen Width: " + availableScreenWidth);
		$global.console.log("Available Screen Height: " + availableScreenHeight);
		div.style.width = availableScreenWidth + "px";
		div.style.height = availableScreenHeight + "px";
		div.style.border = "1px solid green";
		div.style.position = "absolute";
		div.appendChild(img);
		window.document.body.appendChild(div);
	}
	setupWindowManager() {
		$global.console.log("setupWindowManager");
		this.windowManager = new WindowManager();
		this.windowManager.setWinShapeChangeCallback($bind(this,this.updateWindowShape));
		this.windowManager.setWinChangeCallback($bind(this,this.windowsUpdated));
		let metaData = { foo : "bar"};
		this.windowManager.init(metaData);
	}
	windowsUpdated() {
	}
	updateWindowShape(easing) {
		if(easing == null) {
			easing = true;
		}
		$global.console.log("updateWindowShape");
		this.sceneOffsetTarget = { x : -window.screenX, y : -window.screenY};
		if(!easing) {
			this.sceneOffset = this.sceneOffsetTarget;
		}
	}
	render(fl) {
		let t = this.getTime();
		this.windowManager.update();
		let windowData = this.windowManager.getThisWindowData();
		let div = window.document.getElementById("wrapper");
		div.style.left = "" + windowData.shape.x * -1 + "px";
		div.style.top = "" + windowData.shape.y * -1 + "px";
		window.requestAnimationFrame($bind(this,this.render));
	}
	resize() {
		$global.console.log("resize");
		let width = window.innerWidth;
		let height = window.innerHeight;
	}
	getTime() {
		return (new Date().getTime() - this.today) / 1000.0;
	}
	static main() {
		let app = new MainJS();
	}
}
MainJS.__name__ = true;
Math.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		let v = parseInt(x);
		if(isNaN(v)) {
			return null;
		}
		return v;
	}
}
Std.__name__ = true;
class WindowManager {
	constructor() {
		this._windows = [];
		console.log("src/WindowManager.hx:18:","WindowManager");
		let _gthis = this;
		window.onstorage = function(event) {
			if(event.key == "windows") {
				let newWindows = JSON.parse(event.newValue);
				let winChange = _gthis._didWindowsChange(_gthis._windows,newWindows);
				_gthis._windows = newWindows;
				if(winChange) {
					if(_gthis._winChangeCallback) {
						_gthis._winChangeCallback();
					}
				}
			}
		};
		window.addEventListener("beforeunload",function(e) {
			let index = _gthis.getWindowIndexFromId(_gthis._id);
			_gthis._windows.splice(index,1);
			_gthis.updateWindowsLocalStorage();
		});
	}
	_didWindowsChange(pWins,nWins) {
		if(pWins.length != nWins.length) {
			return true;
		} else {
			let c = false;
			let _g = 0;
			let _g1 = pWins.length;
			while(_g < _g1) {
				let i = _g++;
				if(pWins[i].id != nWins[i].id) {
					c = true;
				}
			}
			return c;
		}
	}
	init(metaData) {
		this._windows = [];
		if(window.localStorage.getItem("windows") != null) {
			this._windows = JSON.parse(window.localStorage.getItem("windows"));
		}
		this._count = 0;
		if(window.localStorage.getItem("count") != null) {
			this._count = Std.parseInt(window.localStorage.getItem("count"));
		}
		this._count++;
		this._id = this._count;
		let shape = this.getWinShape();
		this._winData = { id : this._id, shape : shape, metaData : metaData};
		this._windows.push(this._winData);
		window.localStorage.setItem("count",Std.string(this._count));
		this.updateWindowsLocalStorage();
	}
	getWinShape() {
		let shape = { x : window.screenX, y : window.screenY, w : window.innerWidth, h : window.innerHeight};
		return shape;
	}
	getWindowIndexFromId(id) {
		let index = -1;
		let _g = 0;
		let _g1 = this._windows.length;
		while(_g < _g1) {
			let i = _g++;
			if(this._windows[i].id == id) {
				index = i;
			}
		}
		return index;
	}
	updateWindowsLocalStorage() {
		window.localStorage.setItem("windows",JSON.stringify(this._windows));
	}
	update() {
		let winShape = this.getWinShape();
		if(winShape.x != this._winData.shape.x || winShape.y != this._winData.shape.y || winShape.w != this._winData.shape.w || winShape.h != this._winData.shape.h) {
			this._winData.shape = winShape;
			let index = this.getWindowIndexFromId(this._id);
			this._windows[index].shape = winShape;
			if(this._winShapeChangeCallback) {
				this._winShapeChangeCallback();
			}
			this.updateWindowsLocalStorage();
		}
	}
	setWinShapeChangeCallback(callback) {
		this._winShapeChangeCallback = callback;
	}
	setWinChangeCallback(callback) {
		this._winChangeCallback = callback;
	}
	getWindows() {
		return this._windows;
	}
	getThisWindowData() {
		return this._winData;
	}
	getThisWindowID() {
		return this._id;
	}
}
WindowManager.__name__ = true;
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true;
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
{
	String.__name__ = true;
	Array.__name__ = true;
	Date.__name__ = "Date";
}
js_Boot.__toStr = ({ }).toString;
MainJS.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
